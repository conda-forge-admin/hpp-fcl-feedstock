diff --git a/README.md b/README.md
index 9292dd8..2de5e27 100644
--- a/README.md
+++ b/README.md
@@ -6,7 +6,7 @@ HPP-FCL â€” An extension of the Flexible Collision Library
   <a href="http://projects.laas.fr/gepetto/doc/humanoid-path-planner/hpp-fcl/master/coverage/"><img src="https://gepgitlab.laas.fr/humanoid-path-planner/hpp-fcl/badges/master/coverage.svg?job=doc-coverage" alt="Coverage report"/></a>
   <a href="https://anaconda.org/conda-forge/hpp-fcl"><img src="https://img.shields.io/conda/dn/conda-forge/hpp-fcl.svg" alt="Conda Downloads"/></a>
   <a href="https://anaconda.org/conda-forge/hpp-fcl"><img src="https://img.shields.io/conda/vn/conda-forge/hpp-fcl.svg" alt="Conda Version"/></a>
-  <a href="https://badge.fury.io/py/hpp-fcl"><img src="https://badge.fury.io/py/hpp-fcl.svg" alt="PyPI version" height="18"></a>
+  <a href="https://badge.fury.io/py/hpp-fcl"><img src="https://badge.fury.io/py/hpp-fcl.svg" alt="PyPI version"></a>
 </p>
 
 This project is initially a fork from https://github.com/flexible-collision-library/fcl and has evolved since then.
diff --git a/python/collision-geometries.cc b/python/collision-geometries.cc
index e6f35f8..3e6878f 100644
--- a/python/collision-geometries.cc
+++ b/python/collision-geometries.cc
@@ -33,6 +33,7 @@
 //  POSSIBILITY OF SUCH DAMAGE.
 
 #include <eigenpy/eigenpy.hpp>
+#include <eigenpy/eigen-to-python.hpp>
 
 #include "fcl.hh"
 
@@ -77,8 +78,9 @@ typedef std::vector<Triangle> Triangles;
 
 struct BVHModelBaseWrapper
 {
-  typedef Eigen::Matrix<double,Eigen::Dynamic,3> MatrixX3;
-  typedef Eigen::Map<MatrixX3> MapMatrixX3;
+  typedef Eigen::Matrix<double,Eigen::Dynamic,3,Eigen::RowMajor> RowMatrixX3;
+  typedef Eigen::Map<RowMatrixX3> MapRowMatrixX3;
+  typedef Eigen::Ref<RowMatrixX3> RefRowMatrixX3;
   
   static Vec3f & vertice (BVHModelBase & bvh, int i)
   {
@@ -86,9 +88,9 @@ struct BVHModelBaseWrapper
     return bvh.vertices[i];
   }
 
-  static MapMatrixX3 vertices(BVHModelBase & bvh)
+  static RefRowMatrixX3 vertices(BVHModelBase & bvh)
   {
-    return MapMatrixX3(bvh.vertices[0].data(),bvh.num_vertices,3);
+    return MapRowMatrixX3(bvh.vertices[0].data(),bvh.num_vertices,3);
   }
   
   static Triangle tri_indices (const BVHModelBase& bvh, int i)
